AWSTemplateFormatVersion: "2010-09-09"
Description: Template to Deploy DAG codebuild (EXAMPLE)


Parameters:
  ArtifactBucket: 
    Type: String 
    Description: Artifact Bucket for DAG - Specificed in Airflow Setup
  ProjectName:
    Type: String
    Description: Name of the Project
    Default: Airflow
  Owner: 
    Type: String
    Description: Who owns this project - Email
  GitHubAccessToken:
    Type: String
    Description: Name of parameter with GitHub access token
    Default: codebuild-github-token
    NoEcho: True
  EnvironmentClass:
    Type: String
    Description: Environment Class Airflow
    Default: mw1.small
    AllowedValues:
      - mw1.small
      - mw1.medium
      - mw1.large
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: AWS VPC for Airflow Deployment
  SubnetOne:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet 1 for MWAA
  SubnetTwo:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet 2 for MWAA
   

  
Resources:
  CodeBuildCredentials:
    Type: AWS::CodeBuild::SourceCredential
    Properties:
      ServerType: GITHUB
      AuthType: PERSONAL_ACCESS_TOKEN
      Token: !Ref GitHubAccessToken
  
  AirflowSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Security Group For Airflow Deployment"
      GroupName: !Sub "${ProjectName}-SecurityGroup-Airflow"
      SecurityGroupEgress: 
        - Description: "Permit All Outbound"
          IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: "0.0.0.0/0"     
      SecurityGroupIngress: 
        - Description: "Permit HTTPS inbound"
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"    
      Tags: 
        - Key: Owner
          Value: !Ref Owner
      VpcId: !Ref VPCId

  CodeBuildAirflowRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path:  "/Company/" #Path this howeever you want company name is a good option
      Description: Role for Codebuild Airflow
      RoleName: !Sub "Codebuild-${ProjectName}Role"
      Tags: 
        - Key: owner
          Value: !Ref Owner

  CodebuildAirflowPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow 
            Action: 
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: !Sub  "arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/codebuild/*"
          - Effect: Allow
            Action: 
              - "s3:*" #Needs to be narrowed down
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${ArtifactBucket}"
              - !Sub  "arn:${AWS::Partition}:s3:::${ArtifactBucket}/*"
          - Effect: Allow
            Action: 
              - "ec2:DescribeSecurityGroups"
              - "ec2:DescribeSubnets"
            Resource: 
              - "*"
          - Effect: Allow
            Action: 
              - "codebuild:*" # Needs to be narrowed down
            Resource: "*"
      PolicyName: !Sub "Codebuild-${ProjectName}Policy"
      Roles: 
        - !Ref CodeBuildAirflowRole

  CodebuildAirflow: 
    Type: AWS::CodeBuild::Project
    Properties: 
      Name: !Sub "Codebuild-${ProjectName}"
      ServiceRole: {"Fn::GetAtt" : ["CodeBuildAirflowRole", "Arn"] }
      Triggers:
        BuildType: BUILD
        Webhook: True
        FilterGroups:
        - - Type: EVENT
            Pattern: PUSH,PULL_REQUEST_MERGED
          - Type: HEAD_REF
            Pattern: ^refs/heads/main$
            ExcludeMatchedPattern: false
      Artifacts:
        Type: NO_ARTIFACTS
      Environment: 
        Type: ARM_CONTAINER
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/amazonlinux2-aarch64-standard:2.0"
        EnvironmentVariables:
          - Name: ArtifactBucket
            Value: !Ref ArtifactBucket
      Source: 
        Type: GITHUB
        Location:  "https://github.com/DMEvanCT/DagsExamples"

  AirflowRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "airflow.amazonaws.com"
                - "airflow-env.amazonaws.com"
            Action:
              - 'sts:AssumeRole'
      Path:  "/Company/" #Path this howeever you want company name is a good option
      Description: Role for Codebuild Airflow
      RoleName: !Sub "Airflow-${ProjectName}Role"
      Tags: 
        - Key: owner
          Value: !Ref Owner

  AirflowPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow 
            Action: 
              - "s3:GetObject*"
              - "s3:GetBucket*"
              - "s3:List*"
            Resource: 
              - !Sub  "arn:aws:s3:::${ArtifactBucket}"
              - !Sub   "arn:aws:s3:::${ArtifactBucket}/*"
          - Effect: Allow
            Action: "airflow:PublishMetrics"
            Resource: !Sub "arn:aws:airflow:${AWS::Region}:${AWS::AccountId}:environment/${ProjectName}-Airflow"
          - Effect: Allow
            Action: 
              - "logs:CreateLogStream"
              - "logs:CreateLogGroup"
              - "logs:PutLogEvents"
              - "logs:GetLogEvents"
              - "logs:GetLogRecord"
              - "logs:GetLogGroupFields"
              - "logs:GetQueryResults"
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:airflow-*"
          - Effect: Allow
            Action: 
              - "logs:DescribeLogGroups"
            Resource: "*"
          - Effect: Allow
            Action: "s3:GetAccountPublicAccessBlock"
            Resource: "*"
          - Effect: Allow
            Action: "cloudwatch:PutMetricData"
            Resource: "*"
          - Effect: Allow 
            Action: 
              - "sqs:ChangeMessageVisibility"
              - "sqs:DeleteMessage"
              - "sqs:GetQueueAttributes"
              - "sqs:GetQueueUrl"
              - "sqs:ReceiveMessage"
              - "sqs:SendMessage"
            Resource: 
              - !Sub arn:aws:sqs:${AWS::Region}:*:airflow-celery-*
      PolicyName: !Sub "Codebuild-${ProjectName}Policy"
      Roles: 
        - !Ref AirflowRole


  AWSAirflow:
    Type: AWS::MWAA::Environment
    Properties: 
      AirflowVersion: "2.0.2"
      DagS3Path: !Sub  "dags/"
      EnvironmentClass: !Ref EnvironmentClass
      ExecutionRoleArn: {"Fn::GetAtt" : ["AirflowRole", "Arn"] }
      Name: !Sub "${ProjectName}-Airflow"
      NetworkConfiguration: 
        SecurityGroupIds: 
          - {"Fn::GetAtt" : ["AirflowSecurityGroup", "GroupId"] } 
        SubnetIds: 
          - !Ref SubnetOne
          - !Ref SubnetTwo
      RequirementsS3Path: !Sub "requirements.txt"
      SourceBucketArn: !Sub "arn:${AWS::Partition}:s3:::${ArtifactBucket}"
      Tags: 
        Owner: !Ref Owner
      WebserverAccessMode: PUBLIC_ONLY
      WeeklyMaintenanceWindowStart: TUE:03:30



